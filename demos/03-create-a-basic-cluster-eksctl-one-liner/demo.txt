=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - A VPC created with EKS best practices
WHEN:
  - I install eksctl on the C9 desktop
  - I install kubectl no the C9 desktop
  - I issue an eksctl create cluster 1-liner
  - I issue an eksctl create nodegroup 1-liner
THEN:
  - I will get a VPC for the cluster created for me
  - I will get all required IAM Roles for EKS created for me
  - I will get all required security groups
  - I will get a EKS cluster
  - I will get a kubconfig generated for me
  - I will get a Fargate Profile for my cluster
  - I will get an Amazon Linux Managed Nodegroup for my cluster
SO THAT:
  - I can run my wordpress application
=====================================================================
(0) PreReqs

    (-) Set the AWS Region variable for where you want to run these demos

        export C9_REGION=[[YOUR_REGION]]

    (-) Create/Update an EKS style VPC from your Desktop using AWS Cloudformation

        aws cloudformation deploy --region $C9_REGION --template-file ../01-docker-build-wordpress/pre-reqs/cfn-amazon-eks-vpc-private-subnets.cfn \
          --stack-name eks-demos-networking

    (-) Create/Update C9 Instance within the VPC. You will run all subsequent demo steps from a console on the C9 Instance.

        aws cloudformation deploy --region $C9_REGION --template-file ../01-docker-build-wordpress/pre-reqs/cfn-c9-desktop.cfn \
          --stack-name eks-demos-c9-dev-desktop

    (-) Navigate to C9 Instance 'terminal' window of the IDE & resize the disk

        https://console.aws.amazon.com/cloud9/home?
        ---> Open IDE to exec all remaining demo commands within the C9 desktop

        cd ~/environment
        if [ ! -d mglab-share-eks ]; then git clone https://github.com/virtmerlin/mglab-share-eks.git; fi
        chmod 755 ./mglab-share-eks/demos/01-docker-build-wordpress/pre-reqs/resize.sh
        ./mglab-share-eks/demos/01-docker-build-wordpress/pre-reqs/resize.sh
        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

    (-) In the C9 Desktop ... Edit prefs to not use automated AWS creds and pass your AWS Keys to the CLI otherwise eksctl will fail

        ----> Cloud9/Preferences
          ----> AWS Settings
            ----> Disable AWS managed temporary credentials radial button

        aws configure

(1) Install eksctl

    (-)
        cd ~/environment/mglab-share-eks/demos/03-create-a-basic-cluster-eksctl-one-liner/
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

(2) Create Cluster with EKSctl

    (-) Create Cluster & NodeGroup

        eksctl create cluster --name cluster-one-liner --region $C9_REGION --with-oidc --managed --nodes 2

    (-) Create Fargate Profile

        eksctl create fargateprofile --name wordpress-fargate  --namespace wordpress-fargate --labels "fargate=true" --cluster cluster-one-liner --region $C9_REGION


(3) Install kubectl

    (-) Install kubectl & review your kubeconfig

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl config view --minify

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

        kubectl get all -A

(4) Validate k8s dialtone by deploying wordpress with front-end running on fargate & mysql back-end running on managed nodegroup

    (-) Deploy Wordpress with PHP front end on Fargate & mysql backend on managed Nodegroup

        kubectl apply -f ./artifacts/03-DEMO-k8s-all-in-one-fargate.yaml
        kubectl get pods -A -o wide | grep wordpress
        kubectl get nodes -o wide

        kubectl get svc wordpress -o wide

    (-) Navigate to the wordpress service EXTERNAL-IP in browser


(CLEANUP)

  (-) Cleanup Demo Script(s)

    eksctl delete cluster cluster-one-liner --region $C9_REGION

  (-) Cleanup Pre-Reqs Script(s)

    aws cloudformation delete-stack --region $C9_REGION --stack-name eks-demos-c9-dev-desktop
    aws cloudformation wait stack-delete-complete --region $C9_REGION --stack-name eks-demos-c9-dev-desktop
    aws cloudformation delete-stack --region $C9_REGION --stack-name eks-demos-networking
